rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonctions utilitaires
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }
    
    function isEditor() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isEditor == true;
    }
    

// Règles pour la collection users
    match /users/{userId} {
      // Un utilisateur ne peut accéder qu'à son propre profil
      // Les admins et super admins peuvent voir tous les profils
      // Les éditeurs n'ont pas accès aux profils des autres utilisateurs
      allow read: if isOwner(userId) || isAdmin() || isSuperAdmin();
      
      // Seul le propriétaire peut modifier son profil de base
      allow update: if isOwner(userId) && 
                      (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin', 'isEditor', 'isSuperAdmin']));
      
      // Seuls les administrateurs peuvent modifier le statut admin et éditeur
      // Mais un admin normal ne peut pas modifier un super admin
      allow update: if isAdmin() && (
                      !resource.data.isSuperAdmin || isSuperAdmin()
                    );
      
      // Permet aux super admins de supprimer n'importe quel utilisateur
      allow delete: if isSuperAdmin();
      
      // Création autorisée lors de l'inscription
      // Règle modifiée pour éviter la dépendance circulaire
      allow create: if isAuthenticated() && 
                    request.auth.uid == userId && 
                    (!('isAdmin' in request.resource.data) || request.resource.data.isAdmin == false) && 
                    (!('isEditor' in request.resource.data) || request.resource.data.isEditor == false) && 
                    (!('isSuperAdmin' in request.resource.data) || request.resource.data.isSuperAdmin == false);
    }
    
    // Règles pour les questions FAQ
    match /faq/{faqId} {
      // Tout le monde peut lire les questions/réponses publiques
      allow read: if true;
      
      // Les utilisateurs authentifiés peuvent créer des questions
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.userEmail == request.auth.token.email;
      
      // Les admins et éditeurs peuvent répondre aux questions
      allow update: if isAdmin() || isEditor();
      
      // Le propriétaire, les admins et les éditeurs peuvent supprimer
      allow delete: if isOwner(resource.data.userId) || isAdmin() || isEditor();
    }
    
    // Règles pour les sections du guide
    match /guideSections/{sectionId} {
      // Tout le monde peut lire le contenu des guides
      allow read: if true;
      
      // Les administrateurs et éditeurs peuvent modifier le contenu
      allow write: if isAdmin() || isEditor();
    }
    
    // Règles pour les ressources
    match /resources/{resourceId} {
      // Tout le monde peut lire les ressources
      allow read: if true;
      
      // Les administrateurs et éditeurs peuvent ajouter/modifier des ressources
      allow write: if isAdmin() || isEditor();
    }
    
    // Règles pour la progression utilisateur - pas d'accès pour les éditeurs
    match /progressions/{userId} {
      // L'utilisateur peut lire et écrire sa propre progression
      // Un admin peut lire la progression de tous les utilisateurs
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId);
    }
    
    // Règles pour le log d'activité admin - accès pour les éditeurs et admins
    match /adminActivity/{logId} {
      // Les admins et éditeurs peuvent lire et écrire dans cette collection
      allow read: if isAdmin() || isEditor();
      allow create: if isAdmin() || isEditor();
      // Pas de mise à jour/suppression des logs pour l'intégrité des données
      allow update, delete: if false;
    }
    
    // Support pour l'ancienne collection adminActivityLog
    match /adminActivityLog/{logId} {
      // Les admins et éditeurs peuvent lire et écrire dans cette collection
      allow read: if isAdmin() || isEditor();
      allow create: if isAdmin() || isEditor();
      // Pas de mise à jour/suppression des logs pour l'intégrité des données
      allow update, delete: if false;
    }
    
    // Règles pour les données des sous-sections (cases à cocher et champs de saisie)
    match /userSubsectionData/{userId} {
      // L'utilisateur peut lire et écrire ses propres données de sous-sections
      // Un admin peut lire les données de tous les utilisateurs
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId);
    }
    
    // Règles pour les notifications
    match /notifications/{notificationId} {
      // Les utilisateurs peuvent lire leurs propres notifications et les notifications globales
      allow read: if isAuthenticated() && (
                    resource.data.userId == request.auth.uid || 
                    resource.data.userId == null || 
                    (resource.data.type == 'admin' && (isAdmin() || isEditor()))
                  );
      
      // Les administrateurs et éditeurs peuvent créer des notifications globales
      allow create: if (isAdmin() || isEditor()) && (
                      request.resource.data.userId == null || 
                      request.resource.data.type == 'admin'
                    );
                    
      // Les utilisateurs peuvent créer des notifications spécifiques pour eux-mêmes
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
                      
      // Les utilisateurs peuvent marquer leurs propres notifications comme lues
      allow update: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid && 
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
                      
      // Les administrateurs et éditeurs peuvent mettre à jour n'importe quelle notification
      allow update: if isAdmin() || isEditor();
      
      // Les utilisateurs peuvent supprimer leurs propres notifications
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Les administrateurs et éditeurs peuvent supprimer n'importe quelle notification
      allow delete: if isAdmin() || isEditor();
    }
    
    // NOUVELLES RÈGLES POUR LES WEBINAIRES
    
    // Règles pour les webinaires
    match /webinars/{webinarId} {
      // Tout le monde peut lire les webinaires
      allow read: if true;

      // Les administrateurs et éditeurs peuvent créer/modifier/supprimer des webinaires
      allow create, update, delete: if isAdmin() || isEditor();
    }

    // Règles pour les inscriptions aux webinaires
    match /webinarRegistrations/{registrationId} {
      // Les utilisateurs peuvent voir leurs propres inscriptions
      // Les administrateurs et éditeurs peuvent voir toutes les inscriptions
      allow read: if isAuthenticated() && (
                    resource.data.userId == request.auth.uid || 
                    isAdmin() || 
                    isEditor()
                  );

      // Les utilisateurs authentifiés peuvent s'inscrire à un webinaire
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;

      // Les utilisateurs peuvent annuler leur propre inscription
      // Les administrateurs et éditeurs peuvent annuler n'importe quelle inscription
      allow delete: if isAuthenticated() && (
                      resource.data.userId == request.auth.uid || 
                      isAdmin() || 
                      isEditor()
                    );

      // Personne ne peut modifier une inscription après création
      allow update: if false;
    }
    
    // Règles pour les favoris de webinaires
    match /webinarFavorites/{favoriteId} {
      // Les utilisateurs peuvent lister leurs propres favoris et accéder aux documents individuels
      allow read: if isAuthenticated() && (
                    favoriteId.split('_')[0] == request.auth.uid || 
                    request.query.limit <= 500 && 
                    request.query.filters.size() == 1 && 
                    request.query.filters[0].op == "==" && 
                    request.query.filters[0].path == "userId" && 
                    request.query.filters[0].value == request.auth.uid
                  );
      
      // Les utilisateurs peuvent ajouter/supprimer leurs propres favoris
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      favoriteId == request.auth.uid + '_' + request.resource.data.webinarId;
      
      // Les utilisateurs peuvent supprimer leurs propres favoris
      allow delete: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      // Pas de mise à jour des favoris, seulement création/suppression
      allow update: if false;
    }
    
    // Règles pour les propositions d'ateliers
    match /workshopProposals/{proposalId} {
      // Les administrateurs et éditeurs peuvent voir toutes les propositions
      // Les utilisateurs peuvent voir uniquement leurs propres propositions
      allow read: if isAuthenticated() && (
                    isAdmin() || 
                    isEditor() || 
                    resource.data.userId == request.auth.uid
                  );
      
      // Les utilisateurs authentifiés peuvent soumettre des propositions
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid &&
                    request.resource.data.userEmail == request.auth.token.email;
      
      // Les administrateurs et éditeurs peuvent modifier le statut des propositions
      // Les utilisateurs ne peuvent pas modifier leurs propositions après soumission
      allow update: if (isAdmin() || isEditor()) && 
                    request.resource.data.diff(resource.data).affectedKeys()
                      .hasAny(['status', 'updatedAt', 'updatedBy']);
      
      // Les administrateurs et éditeurs peuvent supprimer des propositions
      allow delete: if isAdmin() || isEditor();
    }
    
    // NOUVELLES RÈGLES POUR LE FORUM
    
    // Règles pour les catégories du forum
    match /forumCategories/{categoryId} {
      // Tout utilisateur authentifié peut lire les catégories
      allow read: if isAuthenticated();
      
      // Les administrateurs et éditeurs peuvent créer/modifier/supprimer des catégories
      allow write: if isAdmin() || isEditor();
    }
    
    // Règles pour les discussions du forum
    match /forumThreads/{threadId} {
      // Tout utilisateur authentifié peut lire les discussions
      allow read: if isAuthenticated();

      // Les utilisateurs authentifiés peuvent créer des discussions
      allow create: if isAuthenticated() && 
                     request.resource.data.authorId == request.auth.uid;

      // Les propriétaires peuvent modifier le contenu de leurs discussions
      // Les utilisateurs authentifiés peuvent mettre à jour uniquement repliesCount et updatedAt
      allow update: if isAuthenticated() && (
                     (resource.data.authorId == request.auth.uid &&
                     !request.resource.data.diff(resource.data).affectedKeys()
                       .hasAny(['isPinned', 'isLocked'])) ||
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['repliesCount', 'updatedAt'])
                   );

      // Les administrateurs et éditeurs peuvent épingler ou verrouiller des discussions
      allow update: if isAdmin() || isEditor();

      // Les propriétaires, administrateurs et éditeurs peuvent supprimer des discussions
      allow delete: if isAuthenticated() && 
                     (resource.data.authorId == request.auth.uid || isAdmin() || isEditor());
    }
    
    // Règles pour les messages du forum
    match /forumPosts/{postId} {
      // Tout utilisateur authentifié peut lire les messages
      allow read: if isAuthenticated();
      
      // Les utilisateurs authentifiés peuvent créer des messages
      allow create: if isAuthenticated() && 
                     request.resource.data.authorId == request.auth.uid;
      
      // Les propriétaires peuvent modifier leurs propres messages
      allow update: if isAuthenticated() && 
                     resource.data.authorId == request.auth.uid;
      
      // Les propriétaires, administrateurs et éditeurs peuvent supprimer des messages
      allow delete: if isAuthenticated() && 
                     (resource.data.authorId == request.auth.uid || isAdmin() || isEditor());
    }
    
    // Règles pour la collection feedback
    match /feedback/{feedbackId} {
      // Les admins et éditeurs peuvent lire tous les feedbacks
      allow read: if isAdmin() || isEditor();

      // Les utilisateurs authentifiés peuvent créer un feedback
      allow create: if isAuthenticated() && (
        !('userId' in request.resource.data) || request.resource.data.userId == request.auth.uid
      );

      // Personne ne peut modifier un feedback après création
      allow update, delete: if false;
    }
    
    // Règles pour la collection messages (chat)
    match /messages/{messageId} {
      // Fonction pour vérifier si l'utilisateur est impliqué dans la conversation
      function isParticipant() {
        return isAuthenticated() && (
          resource.data.senderId == request.auth.uid || 
          resource.data.receiverId == request.auth.uid
        );
      }

      // Fonction pour vérifier si l'utilisateur est admin
      function isUserAdmin() {
        return isAuthenticated() && 
               exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      // Fonction pour vérifier si l'utilisateur est super admin
      function isUserSuperAdmin() {
        return isAuthenticated() && 
               exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
      }

      // Les participants à la conversation peuvent lire les messages individuels
      allow get: if isParticipant() || isUserAdmin() || isUserSuperAdmin();
      
      // Pour les requêtes de liste (query/onSnapshot), autoriser tous les utilisateurs authentifiés
      allow list: if isAuthenticated();

      // Les utilisateurs authentifiés peuvent créer des messages où ils sont l'expéditeur
      allow create: if isAuthenticated() && 
                     request.resource.data.senderId == request.auth.uid;

      // Les participants à la conversation peuvent marquer un message comme lu
      allow update: if isAuthenticated() && (
                      (isParticipant() && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read'])) ||
                      isUserAdmin() ||
                      isUserSuperAdmin()
                    );

      // Règles de suppression simplifiées
      allow delete: if isAuthenticated() && (
        // L'utilisateur est l'expéditeur du message
        resource.data.senderId == request.auth.uid ||
        // OU l'utilisateur est un administrateur ou super admin
        isUserAdmin() ||
        isUserSuperAdmin()
      );
    }
    
    // Règle par défaut - bloquer tout autre accès
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
