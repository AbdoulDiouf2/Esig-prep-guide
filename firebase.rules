rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonctions utilitaires (inchangées)
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }
    
    function isEditor() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isEditor == true;
    }

    // Règles pour la collection users
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin() || isSuperAdmin();
      allow update: if isOwner(userId) && 
                      (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin', 'isEditor', 'isSuperAdmin'])) ||
                   isSuperAdmin(); // Ajout pour super admin
      
      allow update: if isAdmin() && (
                      !resource.data.isSuperAdmin || isSuperAdmin()
                    );
      
      allow delete: if isOwner(userId) || isSuperAdmin();
      
      allow create: if isAuthenticated() && 
                    request.auth.uid == userId && 
                    (!('isAdmin' in request.resource.data) || request.resource.data.isAdmin == false) && 
                    (!('isEditor' in request.resource.data) || request.resource.data.isEditor == false) && 
                    (!('isSuperAdmin' in request.resource.data) || request.resource.data.isSuperAdmin == false) ||
                   isSuperAdmin(); // Ajout pour super admin
    }
    
    // Règles pour les questions FAQ
    match /faq/{faqId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.userEmail == request.auth.token.email ||
                   isSuperAdmin(); // Ajout pour super admin
      
      allow update: if isAdmin() || isEditor() || isSuperAdmin();
      allow delete: if isOwner(resource.data.userId) || isAdmin() || isEditor() || isSuperAdmin();
    }
    
    // Règles pour les sections du guide
    match /guideSections/{sectionId} {
      allow read: if true;
      allow write: if isAdmin() || isEditor() || isSuperAdmin();
    }
    
    // Règles pour les ressources
    match /resources/{resourceId} {
      allow read: if true;
      allow write: if isAdmin() || isEditor() || isSuperAdmin();
    }
    
    // Règles pour la progression utilisateur
    match /progressions/{userId} {
      allow read: if isOwner(userId) || isAdmin() || isSuperAdmin();
      allow write: if isOwner(userId) || isSuperAdmin(); // Ajout pour super admin
    }
    
    // Règles pour le log d'activité admin
    match /adminActivity/{logId} {
      allow read: if isAdmin() || isEditor() || isSuperAdmin();
      allow create: if isAdmin() || isEditor() || isSuperAdmin();
      allow update, delete: if false;
    }
    
    // Support pour l'ancienne collection adminActivityLog
    match /adminActivityLog/{logId} {
      allow read: if isAdmin() || isEditor() || isSuperAdmin();
      allow create: if isAdmin() || isEditor() || isSuperAdmin();
      allow update, delete: if false;
    }
    
    // Règles pour les données des sous-sections
    match /userSubsectionData/{userId} {
      allow read: if isOwner(userId) || isAdmin() || isSuperAdmin();
      allow write: if isOwner(userId) || isSuperAdmin(); // Ajout pour super admin
    }
    
    // Règles pour les notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
                    resource.data.userId == request.auth.uid || 
                    resource.data.userId == null || 
                    (resource.data.type == 'admin' && (isAdmin() || isEditor() || isSuperAdmin()))
                  );
      
      allow create: if (isAdmin() || isEditor() || isSuperAdmin()) && (
                      request.resource.data.userId == null || 
                      request.resource.data.type == 'admin'
                    );
                    
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid ||
                   isSuperAdmin(); // Ajout pour super admin
                      
      allow update: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid && 
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']) ||
                   isSuperAdmin(); // Ajout pour super admin
                      
      allow update: if isAdmin() || isEditor() || isSuperAdmin();
      
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid ||
                   isSuperAdmin(); // Ajout pour super admin
      
      allow delete: if isAdmin() || isEditor() || isSuperAdmin();
    }
    
    // Règles pour les webinaires
    match /webinars/{webinarId} {
      allow read: if true;
      allow create: if isAuthenticated() && (isAdmin() || isEditor() || isSuperAdmin());
      allow update: if isAuthenticated() && (isAdmin() || isEditor() || isSuperAdmin());
      
      allow update: if 
        (request.auth == null || isSuperAdmin()) && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'isLive',
          'isUpcoming',
          'isCompleted',
          'updatedAt'
        ]);
      
      allow delete: if isAuthenticated() && (isAdmin() || isEditor() || isSuperAdmin());
    }

    // Règles pour les inscriptions aux webinaires
    match /webinarRegistrations/{registrationId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin() ||
        isSuperAdmin()
      );
      
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid &&
                   request.resource.data.webinarId is string ||
                   isSuperAdmin(); // Ajout pour super admin
                   
      allow delete: if isOwner(resource.data.userId) || isAdmin() || isSuperAdmin();
    }
    
    // Règles pour les favoris de webinaires
    match /webinarFavorites/{favoriteId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin() ||
        isSuperAdmin()
      );
      
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid &&
                   request.resource.data.webinarId is string ||
                   isSuperAdmin(); // Ajout pour super admin
                   
      allow delete: if isOwner(resource.data.userId) || isAdmin() || isSuperAdmin();
    }
    
    // Règles pour les propositions d'ateliers
    match /workshopProposals/{proposalId} {
      allow read: if isAuthenticated() && (
                    isAdmin() || 
                    isEditor() || 
                    resource.data.userId == request.auth.uid ||
                    isSuperAdmin()
                  );
      
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid &&
                    request.resource.data.userEmail == request.auth.token.email ||
                   isSuperAdmin(); // Ajout pour super admin
      
      allow update: if (isAdmin() || isEditor() || isSuperAdmin()) && 
                    request.resource.data.diff(resource.data).affectedKeys()
                      .hasAny(['status', 'updatedAt', 'updatedBy']);
      
      allow delete: if isAdmin() || isEditor() || isSuperAdmin();
    }
    
    // Règles pour le forum
    match /forumCategories/{categoryId} {
      allow read: if isAuthenticated() || isSuperAdmin();
      allow write: if isAdmin() || isEditor() || isSuperAdmin();
    }
    
    match /forumThreads/{threadId} {
      allow read: if isAuthenticated() || isSuperAdmin();

      allow create: if isAuthenticated() && 
                     request.resource.data.authorId == request.auth.uid ||
                   isSuperAdmin(); // Ajout pour super admin

      allow update: if isAuthenticated() && (
                     (resource.data.authorId == request.auth.uid &&
                     !request.resource.data.diff(resource.data).affectedKeys()
                       .hasAny(['isPinned', 'isLocked'])) ||
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['repliesCount', 'updatedAt']) ||
                     isSuperAdmin()
                   );

      allow update: if isAdmin() || isEditor() || isSuperAdmin();

      allow delete: if isAuthenticated() && 
                     (resource.data.authorId == request.auth.uid || isAdmin() || isEditor() || isSuperAdmin());
    }
    
    match /forumPosts/{postId} {
      allow read: if isAuthenticated() || isSuperAdmin();
      
      allow create: if isAuthenticated() && 
                     request.resource.data.authorId == request.auth.uid ||
                   isSuperAdmin(); // Ajout pour super admin
      
      allow update: if isAuthenticated() && 
                     resource.data.authorId == request.auth.uid ||
                   isSuperAdmin(); // Ajout pour super admin
      
      allow delete: if isAuthenticated() && 
                     (resource.data.authorId == request.auth.uid || isAdmin() || isEditor() || isSuperAdmin());
    }
    
    // Règles pour la collection feedback
    match /feedback/{feedbackId} {
      allow read: if isAdmin() || isEditor() || isSuperAdmin();

      allow create: if isAuthenticated() && (
        !('userId' in request.resource.data) || request.resource.data.userId == request.auth.uid
      ) || isSuperAdmin(); // Ajout pour super admin

      allow update, delete: if false;
    }
    
    // Règles pour la gestion des tokens de notification
    match /users/{userId}/tokens/{tokenId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin() || isSuperAdmin());
      allow create: if isAuthenticated() && isOwner(userId) || isSuperAdmin(); // Ajout pour super admin
      allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin() || isSuperAdmin());
    }

    // Règles pour les ressources académiques
    match /academicResources/{resourceId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isAdmin() || isEditor() || isSuperAdmin()) &&
                    request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuthenticated() && (isAdmin() || isEditor() || isSuperAdmin());
      allow delete: if isAuthenticated() && (isAdmin() || isEditor() || isSuperAdmin());
    }

    match /messages/{messageId} {
      function isParticipant() {
        return isAuthenticated() && (
          resource.data.senderId == request.auth.uid || 
          resource.data.receiverId == request.auth.uid
        );
      }

      function isUserAdmin() {
        return isAuthenticated() && 
               exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      function isUserSuperAdmin() {
        return isAuthenticated() && 
               exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
      }

      allow get: if isParticipant() || isUserAdmin() || isUserSuperAdmin();
      allow list: if isAuthenticated() || isUserSuperAdmin(); // Ajout pour super admin

      allow create: if isAuthenticated() && 
                     request.resource.data.senderId == request.auth.uid ||
                   isUserSuperAdmin(); // Ajout pour super admin

      allow update: if isAuthenticated() && (
                      (isParticipant() && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read'])) ||
                      isUserAdmin() ||
                      isUserSuperAdmin()
                    );

      allow delete: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        isUserAdmin() ||
        isUserSuperAdmin()
      );
    }
    
    // Règle par défaut - bloquer tout autre accès
    match /{document=**} {
      allow read, write: if false;
    }
  }
}